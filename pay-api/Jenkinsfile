// Edit your app's name below 
def APP_NAME = 'pay-api'

// Edit your environment TAG names below
def TAG_NAMES = ['dev', 'test', 'prod']

// You shouldn't have to edit these if you're following the conventions
def BUILD_CONFIG = APP_NAME

//EDIT LINE BELOW (Change `IMAGESTREAM_NAME` so it matches the name of your *output*/deployable image stream.) 
def IMAGESTREAM_NAME = APP_NAME

// You'll need to change this to point to your application component's folder within your repository
def CONTEXT_DIRECTORY = APP_NAME

DEV_NAMESPACE = "l4ygcl-dev"
TOOLS_NAMESPACE = "l4ygcl-tools"

@NonCPS
boolean triggerBuild(String contextDirectory) {
  // Determine if code has changed within the source context directory.
  def changeLogSets = currentBuild.changeSets
  def filesChangeCnt = 0
  for (int i = 0; i < changeLogSets.size(); i++) {
    def entries = changeLogSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
      def files = new ArrayList(entry.affectedFiles)
      for (int k = 0; k < files.size(); k++) {
        def file = files[k]
        def filePath = file.path
        //echo ">> ${file.path}"
        if (filePath.contains(contextDirectory)) {
          filesChangeCnt = 1
          k = files.size()
          j = entries.length
        }
      }
    }
  }
  
  if ( filesChangeCnt < 1 ) {
    echo('The changes do not require a build.')
    return false
  }
  else {
    echo('The changes require a build.')
    return true
  } 
}

// Get an image's hash tag
String getImageTagHash(String imageName, String tag = "") {

  if(!tag?.trim()) {
    tag = "latest"
  }

  def istag = openshift.raw("get istag ${imageName}:${tag} -o template --template='{{.image.dockerImageReference}}'")
  return istag.out.tokenize('@')[1].trim()
}

// define job properties - keep 10 builds only
properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])

node {
  if( triggerBuild(CONTEXT_DIRECTORY) ) {

    //This stage of pipeline will only execute once when the pipeline is executed for first time.
    openshift.withCluster() {
      openshift.withProject(TOOLS_NAMESPACE) {
        if (!openshift.selector('bc', "${BUILD_CONFIG}").exists()) {
          stage("Create Build {BUILD_CONFIG}") {
            script {
              try{
                openshift.newBuild("https://github.com/pwei1018/sbc-pay/pay-api", "--name=${BUILD_CONFIG}", "--docker-image=openshift/python:3.6", "--binary=true")
              } catch (e) {
                echo("CREATE IMAGE ${BUILD_CONFIG} ABORTED")
                error('Stopping early…')
              }
            }
          } 
        }  
      }
    } 

    stage("Build Image ${BUILD_CONFIG}") {
      script {
        try {
          openshift.withCluster() {
            openshift.withProject(TOOLS_NAMESPACE) {
              echo "Using project: ${openshift.project()}"

              echo "Building ${BUILD_CONFIG} ..."
              def build = openshift.selector("bc", "${BUILD_CONFIG}").startBuild()
              build.untilEach {
                return it.object().status.phase == "Running"
              }
              build.logs('-f')         
            }
          }
        } catch (e) {
          echo("BUILD ${BUILD_CONFIG} ABORTED")
          error('Stopping early…')
        }
      }
    }

    stage("Testing ${BUILD_CONFIG}") {
      try {
        echo "Testing ${BUILD_CONFIG} ..."
      } catch (e) {
          echo("TESTING ${BUILD_CONFIG} ABORTED")
          error('Stopping early…')
      }
    }

    stage("Tagging ${BUILD_CONFIG}:${TAG_NAMES[0]}") {
      script {
        try{
          openshift.withCluster() {
            openshift.withProject(TOOLS_NAMESPACE) {
              echo "Using project: ${openshift.project()}"

              echo "Tagging ${IMAGESTREAM_NAME} for deployment to ${TAG_NAMES[0]} ..."

              // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
              // Tag the images for deployment based on the image's hash
              def IMAGE_HASH = getImageTagHash("${IMAGESTREAM_NAME}")
              echo "IMAGE_HASH: ${IMAGE_HASH}"
              openshift.tag("${IMAGESTREAM_NAME}@${IMAGE_HASH}", "${IMAGESTREAM_NAME}:${TAG_NAMES[0]}")
            }
          }
        } catch (e) {
          echo("TAGGIN ${BUILD_CONFIG}:${TAG_NAMES[0]} ABORTED")
          error('Stopping early…')
        }
      }
    }
  }
  else {
    stage('No Changes') {
      echo "No changes ..."
      currentBuild.result = 'SUCCESS'
    }
  }
}
